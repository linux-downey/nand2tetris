// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Mux16(b=outALU,a=instruction,sel=instruction[15],out=outToAReg);
        /*A register*/
        Not(in=instruction[15],out=outLoadAIn1);
        Mux(b=instruction[5],sel=instruction[15],out=outLoadAIn2);
        Or(a=outLoadAIn1,b=outLoadAIn2,out=outLoadAReg);
        ARegister(in=outToAReg,load=outLoadAReg,out=aRegOut,out[0..14]=addressM);
	/*ALU input Y*/
        Mux(b=instruction[12],sel=instruction[15],out=outLoadMux16);
        Mux16(a=aRegOut,b=inM,sel=outLoadMux16,out=outToALUY);
        /*ALU input X ,D register*/
        Mux(b=instruction[4],sel=instruction[15],out=outLoadDReg);
        DRegister(in=outALU,load=outLoadDReg,out=outToALUX);
        /* ALU */

        Mux(b=instruction[11],sel=instruction[15],out=outZxIn);
        Mux(b=instruction[10],sel=instruction[15],out=outNxIn);
        Mux(b=instruction[9],sel=instruction[15],out=outZyIn);
        Mux(b=instruction[8],sel=instruction[15],out=outNyIn);
        Mux(b=instruction[7],sel=instruction[15],out=outFIn);
        Mux(b=instruction[6],sel=instruction[15],out=outNoIn);

        ALU(x=outToALUX,y=outToALUY,zx=outZxIn,nx=outNxIn,zy=outZyIn,ny=outNyIn,f=outFIn,no=outNoIn,out=outALU,out=outM,zr=outALUZr,ng=outALUNg);

      /* PC */
        /*load bit*/
        
        Mux(b=instruction[2],sel=instruction[15],out=outj1);
        Mux(b=instruction[1],sel=instruction[15],out=outj2);
        Mux(b=instruction[0],sel=instruction[15],out=outj3);

        And(a=outj1,b=outALUNg,out=outJ1);
        And(a=outj2,b=outALUZr,out=outJ2);
        Not(in=outALUNg,out=outNotALUNg);
        Not(in=outALUZr,out=outNotALUZr);
        And(a=outj3,b=outNotALUNg,out=outTmp1);
        And(a=outTmp1,b=outNotALUZr,out=outJ3);
        Or(a=outJ1,b=outJ2,out=outTmp2);
        Or(a=outTmp2,b=outJ3,out=outLoadPCReg);
        PC(in=aRegOut,load=outLoadPCReg,inc=true,reset=reset,out[0..14]=pc);
       
        /*write M*/ 
        Mux(b=instruction[3],sel=instruction[15],out=writeM);
}
