// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
        DMux(in=load,sel=address[14],a=outRam,b=outOther);
        DMux(in=outOther,sel=address[13],a=outScreen,b=outKeyNull);
        DMux8Way(in=outKeyNull,sel=address[10..12],a=outKey0);
        DMux8Way(in=outKey0,sel=address[7..9],a=outKey1);
        DMux8Way(in=outKey1,sel=address[4..6],a=outKey2);
        DMux8Way(in=outKey2,sel=address[1..3],a=outKey3);
        DMux(in=outKey3,sel=address[0],a=outKey);

        RAM16K(in=in,load=outRam,address=address[0..13],out=ramOut);
        Screen(in=in,load=outScreen,address=address[0..12],out=screenOut);
        Keyboard(out=keyOut);
        Register(in=keyOut,load=outKey,out=keyboardOut);

        Mux4Way16(a=ramOut,b=ramOut,c=screenOut,d=keyOut,sel=address[13..14],out=out);

}
